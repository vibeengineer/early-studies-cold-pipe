import { z } from "zod";

export const ApolloContactSchema = z.object({
  "First Name": z.string().min(1),
  "Last Name": z.string().optional().nullable(),
  Title: z.string().optional().nullable(),
  Company: z.string().optional().nullable(),
  "Company Name for Emails": z.string().optional().nullable(),
  Email: z.string().email().min(1),
  "Email Status": z.string().optional().nullable(),
  "Primary Email Source": z.string().optional().nullable(),
  "Email Confidence": z.string().optional().nullable(), // Could be numeric? Check data variability
  "Primary Email Catch-all Status": z.string().optional().nullable(),
  "Primary Email Last Verified At": z.string().datetime({ offset: true }).optional().nullable(),
  Seniority: z.string().optional().nullable(),
  Departments: z.string().optional().nullable(),
  "Contact Owner": z.string().email().optional().nullable(),
  "Work Direct Phone": z.string().optional().nullable(),
  "Home Phone": z.string().optional().nullable(),
  "Mobile Phone": z.string().optional().nullable(),
  "Corporate Phone": z.string().optional().nullable(),
  "Other Phone": z.string().optional().nullable(),
  Stage: z.string().optional().nullable(),
  Lists: z.string().optional().nullable(),
  "Last Contacted": z.string().optional().nullable(), // Could be date? Check data variability
  "Account Owner": z.string().email().optional().nullable(),
  "# Employees": z.coerce.number().optional().nullable(),
  Industry: z.string().optional().nullable(),
  Keywords: z.string().optional().nullable(),
  "Person Linkedin Url": z.string().url().min(1),
  Website: z.string().url().optional().nullable(),
  "Company Linkedin Url": z.string().url().optional().nullable(),
  "Facebook Url": z.string().url().optional().nullable(),
  "Twitter Url": z.string().url().optional().nullable(),
  City: z.string().optional().nullable(),
  State: z.string().optional().nullable(),
  Country: z.string().optional().nullable(),
  "Company Address": z.string().optional().nullable(),
  "Company City": z.string().optional().nullable(),
  "Company State": z.string().optional().nullable(),
  "Company Country": z.string().optional().nullable(),
  "Company Phone": z.string().optional().nullable(),
  "SEO Description": z.string().optional().nullable(),
  Technologies: z.string().optional().nullable(),
  "Annual Revenue": z.coerce.number().optional().nullable(),
  "Total Funding": z.coerce.number().optional().nullable(),
  "Latest Funding": z.string().optional().nullable(),
  "Latest Funding Amount": z.coerce.number().optional().nullable(),
  "Last Raised At": z.string().datetime({ offset: true }).optional().nullable(),
  "Email Sent": z.string().optional().nullable(), // Could be boolean? Check data variability
  "Email Open": z.coerce.boolean().optional().nullable(),
  "Email Bounced": z.coerce.boolean().optional().nullable(),
  Replied: z.coerce.boolean().optional().nullable(),
  Demoed: z.coerce.boolean().optional().nullable(),
  "Number of Retail Locations": z.coerce.number().optional().nullable(),
  "Apollo Contact Id": z.string(), // Assuming this is required
  "Apollo Account Id": z.string(), // Assuming this is required
  "Secondary Email": z.string().email().optional().nullable(),
  "Secondary Email Source": z.string().optional().nullable(),
  "Tertiary Email": z.string().email().optional().nullable(),
  "Tertiary Email Source": z.string().optional().nullable(),
});

export type ApolloContact = z.infer<typeof ApolloContactSchema>;
